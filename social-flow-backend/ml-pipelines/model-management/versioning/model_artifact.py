# ModelArtifact dataclass + serialization helpers
# model_artifact.py
"""
ModelArtifact: representation of a model artifact + metadata
Includes helpers to serialize/deserialize metadata and validate integrity.
"""

from dataclasses import dataclass, asdict, field
from typing import Dict, Any, Optional
import json
import time


@dataclass
class ModelArtifact:
    """
    Represents a model artifact entry in the registry.
    Keep this small and JSON-serializable.
    """
    name: str                            # logical model name (e.g., fraud-detector)
    version: str                         # semantic version or autogenerated tag
    uri: str                             # storage URI (s3://..., file:///..., or local path)
    created_at: float = field(default_factory=lambda: time.time())
    created_by: Optional[str] = None     # username or CI job id
    metadata: Dict[str, Any] = field(default_factory=dict)  # arbitrary key-values (metrics, params)
    provenance: Dict[str, Any] = field(default_factory=dict)  # training data hash, git commit, env
    signature: Optional[str] = None      # optional signature / checksum

    def to_json(self) -> str:
        payload = asdict(self)
        return json.dumps(payload, default=str)

    @staticmethod
    def from_json(s: str) -> "ModelArtifact":
        obj = json.loads(s)
        return ModelArtifact(
            name=obj["name"],
            version=obj["version"],
            uri=obj["uri"],
            created_at=obj.get("created_at", time.time()),
            created_by=obj.get("created_by"),
            metadata=obj.get("metadata", {}),
            provenance=obj.get("provenance", {}),
            signature=obj.get("signature"),
        )
