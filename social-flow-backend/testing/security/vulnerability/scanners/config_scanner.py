# =========================
# File: testing/security/vulnerability/scanners/config_scanner.py
"""
Insecure config scanner:
- Scans common config files for insecure values:
  - debug: true
  - TLS versions set to SSLv3
  - insecure CORS origins: "*"
  - mysql/postgres running without TLS flags (heuristic)
"""
import re
from pathlib import Path
from ..utils.fileutils import read_text_safe
from ..utils.logger import get_logger
import fnmatch

logger = get_logger("ConfigScanner")

def scan(repo_path: Path, patterns=None):
    patterns = patterns or ["*.yml", "*.yaml", "*.json", "Dockerfile"]
    findings = []
    for pat in patterns:
        for p in repo_path.rglob(pat):
            txt = read_text_safe(p)
            if not txt:
                continue
            lower = txt.lower()
            if re.search(r"\bdebug\s*:\s*true\b", lower) or re.search(r"\"debug\"\s*:\s*true", lower):
                findings.append({"file": str(p), "issue": "debug_enabled"})
            if "ssl3" in lower or "sslv3" in lower:
                findings.append({"file": str(p), "issue": "ssl3_enabled"})
            if re.search(r"cors.*:\s*\*", lower) or re.search(r"access-control-allow-origin.*:\s*\*", lower):
                findings.append({"file": str(p), "issue": "cors_wildcard"})
            # detect no TLS on DB URLs heuristically
            if re.search(r"postgresql://[^@]+@[^:]+:\d+/\w+", txt) and "sslmode=require" not in lower:
                findings.append({"file": str(p), "issue": "postgres_no_sslmode"})
    return {"findings": findings}
