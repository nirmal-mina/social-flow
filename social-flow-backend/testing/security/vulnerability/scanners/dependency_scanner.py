# =========================
# File: testing/security/vulnerability/scanners/dependency_scanner.py
# =========================
"""
Dependency scanner:
- Parses common manifests (requirements.txt, package.json)
- Looks up known vulnerabilities using a pluggable local stub or external provider
- Non-destructive: only reads files
"""
from pathlib import Path
from ..parsers.requirements_parser import parse_requirements
from ..parsers.packagejson_parser import parse_packagejson
from ..utils.vulnerability_db import VulnerabilityDB
from ..utils.logger import get_logger

logger = get_logger("DepScanner")

def scan(repo_path: Path, manifests: list, offline=False):
    repo = Path(repo_path)
    all_deps = []
    findings = {"dependencies": [], "vulnerabilities": []}
    for m in manifests:
        manifest_path = repo / m
        if manifest_path.exists():
            logger.info(f"Parsing manifest: {manifest_path}")
            if manifest_path.name == "requirements.txt":
                deps = parse_requirements(manifest_path)
            elif manifest_path.name == "package.json":
                deps = parse_packagejson(manifest_path)
            else:
                # best-effort: try requirements parsing
                deps = parse_requirements(manifest_path)
            all_deps.extend(deps)
        else:
            logger.debug(f"Manifest not found: {manifest_path}")

    db = VulnerabilityDB(offline=offline)
    for dep in all_deps:
        vulns = db.lookup(dep.get("name"), dep.get("version"))
        findings["dependencies"].append(dep)
        if vulns:
            findings["vulnerabilities"].append({"dependency": dep, "vulnerabilities": vulns})
    return findings
