# =========================
# File: testing/security/vulnerability/scanners/secret_scanner.py
"""
Heuristic secret scanning using:
- regex patterns for common secret formats (AWS keys, Google API keys, generic tokens)
- entropy check for high-entropy strings
Non-destructive: does not transmit found secrets; reports file + snippet + entropy.
"""
import re
import math
from pathlib import Path
from ..utils.fileutils import read_text_safe
from ..utils.logger import get_logger

logger = get_logger("SecretScanner")

# Simple regexes (conservative set)
PATTERNS = {
    "aws_access_key_id": re.compile(r"AKIA[0-9A-Z]{16}"),
    "aws_secret_key_like": re.compile(r"(?i)aws(.{0,20})?secret"),
    "google_api_key": re.compile(r"AIza[0-9A-Za-z\-_]{35}"),
    "generic_token": re.compile(r"[A-Za-z0-9_\-]{32,}"),
}

def entropy(s: str) -> float:
    # Shannon entropy
    if not s:
        return 0.0
    prob = {}
    for ch in s:
        prob[ch] = prob.get(ch, 0) + 1
    ent = 0.0
    length = len(s)
    for v in prob.values():
        p = v / length
        ent -= p * math.log2(p)
    return ent

def scan(repo_path: Path, entropy_threshold: float = 4.5, exclude_paths: list = None):
    repo = Path(repo_path)
    exclude_paths = exclude_paths or []
    findings = []
    for f in repo.rglob("*"):
        if f.is_dir():
            continue
        strf = str(f)
        if any(strf.startswith(str(repo / ex)) or ex in strf for ex in exclude_paths):
            continue
        # only check text-like files, skip binaries heuristically
        txt = read_text_safe(f)
        if txt is None:
            continue
        # regex checks
        for name, pat in PATTERNS.items():
            for m in pat.finditer(txt):
                snippet = txt[max(0, m.start()-40): m.end()+40]
                findings.append({"file": strf, "type": name, "match": m.group(0), "snippet": snippet[:200], "entropy": entropy(m.group(0))})
        # entropy sliding windows for long tokens
        tokens = re.findall(r"[A-Za-z0-9_\-]{20,}", txt)
        for tok in tokens:
            ent = entropy(tok)
            if ent >= entropy_threshold:
                findings.append({"file": strf, "type": "high_entropy_string", "snippet": tok[:200], "entropy": ent})
    return {"findings": findings}
