# =========================
# File: testing/security/vulnerability/vulnerability_runner.py
# =========================
"""
Command-line / programmatic entrypoint for vulnerability tests.
Usage:
    python -m testing.security.vulnerability.vulnerability_runner --policies vulnerability_policies.yaml --repo /path/to/repo --report vuln_report.json
"""
import argparse
from pathlib import Path
import yaml
from .engine import VulnerabilityEngine
from .utils.logger import get_logger

logger = get_logger("VulnRunner")

def main():
    parser = argparse.ArgumentParser(description="Vulnerability testing runner (safe defaults).")
    parser.add_argument("--policies", default="vulnerability_policies.yaml", help="Policy YAML file")
    parser.add_argument("--repo", required=True, help="Path to repository or codebase to scan")
    parser.add_argument("--report", default="vuln_report.json", help="Output report path")
    parser.add_argument("--offline", action="store_true", help="Use offline/local vulnerability DB only")
    args = parser.parse_args()

    engine = VulnerabilityEngine(policy_file=args.policies, repo_path=args.repo, offline=args.offline)
    results = engine.run_all()
    report_path = engine.generate_report(results, outpath=args.report, fmt="json")
    logger.info(f"Vulnerability report: {report_path}")
    print(report_path)

if __name__ == "__main__":
    main()
