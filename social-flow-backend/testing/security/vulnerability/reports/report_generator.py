# =========================
# File: testing/security/vulnerability/reports/report_generator.py
"""
Generates JSON or HTML vulnerability reports.
Includes a simple aggregated risk score and per-policy breakdown.
"""
import json
from datetime import datetime
from ..utils.logger import get_logger

logger = get_logger("VulnReport")

def _compute_score(results: dict):
    # naive scoring: critical issue adds 10, high 5, medium 2, low 1
    score = 0
    details = []
    for pid, res in results.items():
        # examine known keys
        # dependency vulns
        if isinstance(res, dict):
            if res.get("vulnerabilities"):
                for v in res["vulnerabilities"]:
                    # each vuln entry may have severity in db; sample treat as high
                    score += 5
                    details.append({"policy": pid, "type": "dependency_vuln"})
            if res.get("issues") or res.get("findings"):
                # each file finding adds small score
                cnt = 0
                if isinstance(res.get("issues"), dict):
                    cnt = sum(len(v) for v in res.get("issues").values())
                elif isinstance(res.get("findings"), list):
                    cnt = len(res.get("findings"))
                score += cnt * 2
                if cnt:
                    details.append({"policy": pid, "type": "static_or_secret_findings", "count": cnt})
    return {"score": score, "details": details}

def generate(results: dict, repo: str = ".", outpath="vuln_report.json", fmt="json"):
    report = {
        "repo": repo,
        "timestamp": str(datetime.utcnow()),
        "results": results,
        "summary": _compute_score(results)
    }
    if fmt == "json":
        with open(outpath, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2)
        logger.info(f"Wrote vulnerability report to {outpath}")
        return outpath
    elif fmt == "html":
        html = "<html><body><h1>Vulnerability Report</h1>"
        html += f"<p>Repo: {repo}</p><p>Generated: {report['timestamp']}</p>"
        html += "<h2>Summary</h2><pre>{}</pre>".format(json.dumps(report["summary"], indent=2))
        html += "<h2>Details</h2><pre>{}</pre>".format(json.dumps(results, indent=2))
        html += "</body></html>"
        out = outpath if outpath.endswith(".html") else outpath + ".html"
        with open(out, "w", encoding="utf-8") as f:
            f.write(html)
        logger.info(f"Wrote HTML vulnerability report to {out}")
        return out
