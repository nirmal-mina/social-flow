# =========================
# File: testing/security/vulnerability/engine.py
# =========================
"""
Engine orchestrating vulnerability scanners per policy.
Returns structured results suitable for reporting.
"""
from pathlib import Path
import yaml
from .utils.logger import get_logger
from .scanners import dependency_scanner, ssa_scanner, secret_scanner, config_scanner
from .reports.report_generator import generate as generate_report

logger = get_logger("VulnEngine")

class VulnerabilityEngine:
    def __init__(self, policy_file="vulnerability_policies.yaml", repo_path=".", offline=False):
        self.repo_path = Path(repo_path)
        self.policy_file = Path(policy_file)
        self.offline = offline
        self.policies = []
        self._load_policies()

    def _load_policies(self):
        if not self.policy_file.exists():
            raise FileNotFoundError(f"Policy file not found: {self.policy_file}")
        with open(self.policy_file, "r", encoding="utf-8") as f:
            conf = yaml.safe_load(f)
        self.policies = conf.get("policies", [])
        logger.info(f"Loaded {len(self.policies)} policies")

    def run_all(self):
        """
        Runs all enabled policies applicable to the repository.
        Returns: dict of policy_id -> findings
        """
        findings = {}
        for policy in self.policies:
            if not policy.get("enabled", True):
                continue
            pid = policy["id"]
            logger.info(f"Running policy {pid}: {policy.get('description')}")
            try:
                if pid.startswith("VULN-DEP"):
                    manifests = policy.get("settings", {}).get("package_manifests", ["requirements.txt"])
                    findings[pid] = dependency_scanner.scan(self.repo_path, manifests, offline=self.offline)
                elif pid.startswith("VULN-SSA"):
                    settings = policy.get("settings", {})
                    findings[pid] = ssa_scanner.scan(self.repo_path, file_types=settings.get("file_types", [".py"]))
                elif pid.startswith("VULN-SECRET"):
                    settings = policy.get("settings", {})
                    findings[pid] = secret_scanner.scan(self.repo_path, entropy_threshold=settings.get("entropy_threshold", 4.5),
                                                      exclude_paths=settings.get("exclude_paths", []))
                elif pid.startswith("VULN-CONFIG"):
                    settings = policy.get("settings", {})
                    findings[pid] = config_scanner.scan(self.repo_path, patterns=settings.get("config_files", ["*.yml","*.json"]))
                else:
                    findings[pid] = {"skipped": True, "reason": "Unknown policy id"}
            except Exception as e:
                logger.exception(f"Error running policy {pid}: {e}")
                findings[pid] = {"error": str(e)}
        return findings

    def generate_report(self, results, outpath="vuln_report.json", fmt="json"):
        return generate_report(results, repo=str(self.repo_path), outpath=outpath, fmt=fmt)
