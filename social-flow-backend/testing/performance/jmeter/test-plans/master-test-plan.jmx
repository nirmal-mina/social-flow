<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Master Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">Advanced performance master plan for baseline, auth, storage, failover</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments">
        <collectionProp name="Arguments.arguments">
          <!-- Variables will be loaded from user.properties or system properties -->
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <!-- HTTP Request Defaults -->
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${__P(base_url,localhost)}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      
      <!-- CSV Data Set: users -->
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set - Users" enabled="true">
        <stringProp name="filename">data/users.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <stringProp name="variableNames">username,password</stringProp>
      </CSVDataSet>
      <hashTree/>
      
      <!-- CSV Data Set: upload files -->
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set - Upload Files" enabled="true">
        <stringProp name="filename">data/upload-files.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <stringProp name="variableNames">upload_key,file_path</stringProp>
      </CSVDataSet>
      <hashTree/>
      
      <!-- Header Manager: default headers -->
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Default Headers" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="h1" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="h2" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      
      <!-- Cookie Manager -->
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Manager" enabled="true"/>
      <hashTree/>
      
      <!-- Backend Listener (optional) -->
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="InfluxDB Backend Listener (Optional)" enabled="false">
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        <elementProp name="parameters" elementType="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsDatabase" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsDatabase</stringProp>
              <stringProp name="Argument.value">${__P(backend_influxdb_db,jmeter)}</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">${__P(backend_influxdb_url,http://influx:8086)}</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">perf-suite</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
      </BackendListener>
      <hashTree/>
      
      <!-- ===== ThreadGroup: Auth Flow ===== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Auth Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads_auth,20)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup_auth,30)}</stringProp>
        <longProp name="ThreadGroup.start_time">0</longProp>
        <longProp name="ThreadGroup.end_time">0</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration_auth,120)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <!-- JSR223 PreProcessor: token-manager to populate Authorization header variable -->
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Token Manager PreProcessor" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="script">load('/work/scripts/token-manager.groovy')</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        
        <!-- HTTP Sampler: Login -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /auth/login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.path">/auth/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments"></stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.PostBody" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__groovy("{\"username\":\"${username}\",\"password\":\"${password}\"}")}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <!-- JSON Extractor to capture token -->
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">login_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <boolProp name="JSONPostProcessor.defaultValues">false</boolProp>
            <stringProp name="JSONPostProcessor.defaultValuesValue"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <!-- BeanShell/JSR223 PostProcessor to set property auth token globally if needed -->
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Set global token property" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="script"><![CDATA[
              // Set JMeter property for token caching; careful in distributed runs (per-node)
              if (vars.get('login_token') != null) {
                  props.put('PERF_AUTH_TOKEN', vars.get('login_token'))
              }
            ]]></stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        
        <!-- HTTP Sampler: protected endpoint using Authorization header from token manager -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /auth/me" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.path">/auth/me</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <!-- Header Manager: add Authorization header dynamically -->
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Auth Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="AuthHeader" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <!-- Use variable set by token-manager.groovy (auth_header_value) -->
                <stringProp name="Header.value">${auth_header_value}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <!-- Response Assertion: 200 -->
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert 200 for /auth/me" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="assert1">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      
      <!-- ===== ThreadGroup: Baseline API ===== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Baseline Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads_baseline,100)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup_baseline,60)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration_baseline,300)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <!-- HTTP Sampler: GET /health -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /health" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments"/>
          <stringProp name="HTTPSampler.path">/health</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Health status 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="assert1">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        
        <!-- HTTP Sampler: POST /items (Create) -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /items (create)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments"/>
          <stringProp name="HTTPSampler.path">/items</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.PostBody" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__groovy("{\"name\":\"perf-item-${System.currentTimeMillis()}-${Math.abs(new Random().nextInt())}\",\"description\":\"autogenerated\"}")}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <!-- JSON Extractor: capture created id -->
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract createdId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">createdId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        
        <!-- HTTP Sampler: GET /items/${createdId} -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /items/{id}" enabled="true">
          <stringProp name="HTTPSampler.path">/items/${createdId}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments"/>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      
      <!-- ===== ThreadGroup: Storage Upload (multipart) ===== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Storage Upload Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads_storage,30)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup_storage,30)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration_storage,180)}</stringProp>
      </ThreadGroup>
      <hashTree>
        <!-- JSR223 Sampler that runs multipart-upload.groovy -->
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Multipart Upload Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${upload_key},${file_path}</stringProp>
          <stringProp name="script">load('/work/scripts/multipart-upload.groovy')</stringProp>
        </JSR223Sampler>
        <hashTree/>
        
        <!-- HTTP Sampler fallback: POST /storage/upload to notify app of upload -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /storage/upload notify" enabled="true">
          <stringProp name="HTTPSampler.path">/storage/upload</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.PostBody" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__groovy("{\"key\":\"${upload_key}\"}")}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      
      <!-- ===== Listeners ===== -->
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree (Disabled)" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
      </ResultCollector>
      <hashTree/>
      
      <!-- Summary Report (CSV) -->
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report CSV" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>false</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${__P(report_output_dir,./reports)}/summary.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      
      <!-- JSR223 Listener to process and generate summary.json -->
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="Result Applier Listener" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="script">load('/work/scripts/result-applier.groovy')</stringProp>
      </JSR223Listener>
      <hashTree/>
      
    </hashTree>
  </hashTree>
</jmeterTestPlan>
