


# 2) `sonar-project.properties` (single-file example + comments)

# ------------------------------------------------------------------
# Root Sonar project configuration
# Place this at the repository root if you want default scanning behavior
# ------------------------------------------------------------------

# Unique project key in Sonar — update to your organization/project naming
sonar.projectKey=org.example:my-repo
sonar.projectName=My Repository - Multi-language Example
sonar.projectVersion=1.0.0

# Sonar host — overridden in CI by environment variable or scanner param
# (If using sonar-scanner CLI, you can provide -Dsonar.host.url=... or export SONAR_HOST_URL env)
# sonar.host.url=http://localhost:9000

# Encoding & language settings
sonar.sourceEncoding=UTF-8

# Multi-module / monorepo examples
# If you have multiple modules, set sonar.modules to a comma-separated list and add per-module properties.
# Example:
# sonar.modules=backend,frontend
#
# backend.sonar.projectBaseDir=backend
# backend.sonar.sources=src/main/java,src/main/kotlin
#
# frontend.sonar.projectBaseDir=frontend
# frontend.sonar.sources=src
#
# For many modern monorepos prefer running separate analyses per module rather than a single multi-module scan.

# Exclusions — common build/output directories
sonar.exclusions=**/build/**, **/dist/**, **/node_modules/**, **/.venv/**, **/venv/**, **/__pycache__/**

# Test & coverage configuration
# Language-specific coverage reports:
# - Java/Kotlin: use jacoco and provide sonar.coverage.jacoco.xmlReportPaths
# - JavaScript/TypeScript: use jest/nyc and provide coverage reports (lcov)
# - Python: use coverage.py and provide coverage.xml

# Java / Kotlin example (Jacoco aggregate report path)
sonar.javascript.lcov.reportPaths=coverage/lcov.info
sonar.typescript.lcov.reportPaths=coverage/lcov.info
sonar.python.coverage.reportPaths=coverage/coverage.xml
sonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml

# Encoding and additional settings
sonar.tests=src/test,tests
sonar.test.inclusions=**/*Test*.java,**/*Spec*.kt,**/*_test.py
sonar.test.exclusions=**/integration-tests/**

# Quality gate
# You can specify the quality gate name to be applied via the REST API (recommended),
# or rely on the default quality gate configured in Sonar.
# sonar.qualitygate=MyOrganizationQualityGate

# SCM (Git) settings — these are often auto-detected; enable blame data
sonar.scm.provider=git
# For PR decoration, configure CI integration (see the GitHub Actions below).

# Analysis properties tuning for big monorepos:
# - analyses should be incremental where possible
# - set sonar.sources to minimal set to speed analysis
# - set sonar.branch.name in PR builds
# Example: sonar.branch.name=${GITHUB_HEAD_REF}

# ------------------------------------------------------------------
# End of properties
# ------------------------------------------------------------------
