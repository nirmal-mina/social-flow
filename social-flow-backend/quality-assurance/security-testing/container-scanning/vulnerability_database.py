"""
Vulnerability Database management for container scanning.
"""

import json
import requests
import os
from datetime import datetime, timedelta
from .config import VULN_DB_CONFIG
from .utils import logger


class VulnerabilityDatabase:
    def __init__(self):
        self.db_path = VULN_DB_CONFIG["local_cache"]
        self.update_url = VULN_DB_CONFIG["update_url"]
        self.update_interval = timedelta(hours=VULN_DB_CONFIG["update_interval_hours"])
        self.last_updated = None
        self.vuln_data = {}

        self._load_cache()

    def _load_cache(self):
        """Load vulnerability data from cache."""
        if os.path.exists(self.db_path):
            with open(self.db_path, "r", encoding="utf-8") as f:
                self.vuln_data = json.load(f)
                self.last_updated = datetime.fromisoformat(self.vuln_data.get("_last_updated", datetime.min.isoformat()))
        else:
            logger.warning("No local vulnerability database cache found.")

    def update(self):
        """Update database if stale."""
        if not self.last_updated or datetime.utcnow() - self.last_updated > self.update_interval:
            try:
                response = requests.get(self.update_url, timeout=10)
                response.raise_for_status()
                data = response.json()
                data["_last_updated"] = datetime.utcnow().isoformat()
                self.vuln_data = data

                with open(self.db_path, "w", encoding="utf-8") as f:
                    json.dump(data, f, indent=2)

                self.last_updated = datetime.utcnow()
                logger.info("Vulnerability DB updated successfully.")
            except Exception as e:
                logger.error(f"Failed to update vulnerability DB: {e}")

    def find_vulnerabilities(self, package_name: str, version: str) -> list:
        """Check if package version has known vulnerabilities."""
        vulns = []
        pkg_data = self.vuln_data.get("packages", {}).get(package_name, {})
        for vuln in pkg_data.get("vulnerabilities", []):
            if vuln["affected_version"] == version:
                vulns.append(vuln)
        return vulns
