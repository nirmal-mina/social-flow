"""
Vulnerability Database for Dependency Scanning
"""

import json
import requests
import os
from datetime import datetime, timedelta
from .config import VULN_DB_CONFIG
from .utils import logger


class DependencyVulnerabilityDatabase:
    def __init__(self):
        self.cache_file = VULN_DB_CONFIG["cache_file"]
        self.api = VULN_DB_CONFIG["osv_api"]
        self.update_interval = timedelta(hours=VULN_DB_CONFIG["update_interval_hours"])
        self.last_updated = None
        self.cache = {}

        self._load_cache()

    def _load_cache(self):
        if os.path.exists(self.cache_file):
            with open(self.cache_file, "r", encoding="utf-8") as f:
                self.cache = json.load(f)
                self.last_updated = datetime.fromisoformat(self.cache.get("_last_updated", datetime.min.isoformat()))

    def _save_cache(self):
        self.cache["_last_updated"] = datetime.utcnow().isoformat()
        with open(self.cache_file, "w", encoding="utf-8") as f:
            json.dump(self.cache, f, indent=2)

    def query(self, ecosystem: str, package: str, version: str):
        """Query OSV API for vulnerabilities."""
        key = f"{ecosystem}:{package}:{version}"
        if key in self.cache:
            return self.cache[key]

        payload = {
            "version": version,
            "package": {"name": package, "ecosystem": ecosystem.capitalize()}
        }
        try:
            resp = requests.post(self.api, json=payload, timeout=10)
            resp.raise_for_status()
            vulns = resp.json().get("vulns", [])
            self.cache[key] = vulns
            self._save_cache()
            return vulns
        except Exception as e:
            logger.error(f"Failed querying OSV for {package}@{version}: {e}")
            return []
