"""
Real-time subscriptions for posts, likes, edits, deletes and feed insertions.
Supports fine-grained filtering (authorId, hashtags, visibility) and delivery semantics
(pessimistic vs optimistic). Use topic-based channels to scale (topic per user, per hashtag).
"""

scalar DateTime
scalar JSON

type Subscription {
  """
  New post created matching the provided filter. Use this for chronological feed streaming.
  """
  newPost(input: NewPostSubscriptionInput!): PostEvent!

  """
  Updates to an existing post (edit/pin/unpin).
  """
  postUpdated(input: PostUpdatedSubscriptionInput!): PostEvent!

  """
  Post deleted event (notify viewers to remove from UI).
  """
  postDeleted(input: PostDeletedSubscriptionInput!): PostDeletedEvent!

  """
  Real-time like/unlike events for a post.
  """
  postReactionChanged(input: PostReactionSubscriptionInput!): PostReactionEvent!
}

input NewPostSubscriptionInput {
  # subscribe to posts by authors, hashtags or global feed
  authorIds: [ID!]
  hashtags: [String!]
  visibility: PostVisibility = PUBLIC
  minFollowersOfAuthor: Int
  first: Int = 50         # server may use to limit burst
  subscriptionToken: String
  # optional dedupe window (ms) to avoid repeats when many events triggered
  dedupeWindowMs: Int = 500
}

input PostUpdatedSubscriptionInput {
  postId: ID
  authorIds: [ID!]
  subscriptionToken: String
}

input PostDeletedSubscriptionInput {
  postId: ID!
  authorIds: [ID!]
  subscriptionToken: String
}

input PostReactionSubscriptionInput {
  postId: ID!
  # types of reactions to receive (LIKE, LOVE, LAUGH, etc.)
  reactionTypes: [ReactionType!] = [LIKE]
  includeCounts: Boolean = true
  subscriptionToken: String
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  SAD
  ANGRY
  WOW
}

type PostEvent {
  eventType: PostEventType!
  post: Post
  occurredAt: DateTime!
  metadata: JSON
}

enum PostEventType {
  CREATED
  UPDATED
  PINNED
  UNPINNED
}

type PostDeletedEvent {
  postId: ID!
  authorId: ID!
  deletedAt: DateTime!
  reason: String
}

type PostReactionEvent {
  postId: ID!
  actorId: ID!
  reaction: ReactionType!
  totalCount: Int           # new total after this event (if includeCounts)
  occurredAt: DateTime!
  metadata: JSON
}

# NOTE: Post type referenced from shared types. Server should push minimal payloads if fieldsMask provided by client.
