# ================================
# Production Docker Compose
# ================================
# This file defines the complete production stack including:
# - FastAPI Application (multiple replicas)
# - PostgreSQL Database
# - Redis Cache & Message Broker
# - Celery Workers
# - Celery Beat Scheduler
# - Nginx Reverse Proxy
# ================================

version: '3.8'

services:
  # ================================
  # PostgreSQL Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: socialflow-postgres
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-socialflow}
      POSTGRES_USER: ${DATABASE_USER:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres} -d ${DATABASE_NAME:-socialflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - socialflow-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Redis Cache & Message Broker
  # ================================
  redis:
    image: redis:7-alpine
    container_name: socialflow-redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - socialflow-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # FastAPI Application (Web Server)
  # ================================
  web:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: runtime
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION:-1.0.0}
    image: socialflow-backend:${VERSION:-1.0.0}
    container_name: socialflow-web-1
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application
      ENVIRONMENT: production
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      
      # Database
      DATABASE_URL: postgresql+asyncpg://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-socialflow}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      
      # AWS
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      MEDIACONVERT_ENDPOINT: ${MEDIACONVERT_ENDPOINT}
      MEDIACONVERT_ROLE_ARN: ${MEDIACONVERT_ROLE_ARN}
      IVS_CHANNEL_ARN: ${IVS_CHANNEL_ARN}
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # SendGrid
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      
      # Firebase
      FIREBASE_CREDENTIALS: ${FIREBASE_CREDENTIALS}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_static:/app/static
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - socialflow-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ================================
  # Additional Web Replicas (Scaling)
  # ================================
  web-replica:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: runtime
    image: socialflow-backend:${VERSION:-1.0.0}
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ENVIRONMENT: production
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql+asyncpg://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-socialflow}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FIREBASE_CREDENTIALS: ${FIREBASE_CREDENTIALS}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_static:/app/static
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - socialflow-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ================================
  # Celery Worker (Background Tasks)
  # ================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: runtime
    image: socialflow-backend:${VERSION:-1.0.0}
    container_name: socialflow-celery-worker
    restart: always
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ENVIRONMENT: production
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql+asyncpg://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-socialflow}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      MEDIACONVERT_ENDPOINT: ${MEDIACONVERT_ENDPOINT}
      MEDIACONVERT_ROLE_ARN: ${MEDIACONVERT_ROLE_ARN}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FIREBASE_CREDENTIALS: ${FIREBASE_CREDENTIALS}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - socialflow-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # ================================
  # Celery Beat (Periodic Scheduler)
  # ================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: runtime
    image: socialflow-backend:${VERSION:-1.0.0}
    container_name: socialflow-celery-beat
    restart: always
    command: celery -A app.core.celery beat --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ENVIRONMENT: production
      DEBUG: "false"
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql+asyncpg://${DATABASE_USER:-postgres}:${DATABASE_PASSWORD}@postgres:5432/${DATABASE_NAME:-socialflow}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - app_logs:/app/logs
    networks:
      - socialflow-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Nginx Reverse Proxy (Load Balancer)
  # ================================
  nginx:
    image: nginx:alpine
    container_name: socialflow-nginx
    restart: always
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_static:/var/www/static:ro
    networks:
      - socialflow-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  app_static:
    driver: local

# ================================
# Networks
# ================================
networks:
  socialflow-network:
    driver: bridge
